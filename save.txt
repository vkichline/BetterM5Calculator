Things to do:
Add % command
Add CS command
Add ^ command
Implement key memories
Add number bases
Consider integer mode
Add trig mode
Add trig operators
Create M5Calc

======================================================


enum Num_Mode { Binary_Mode, Octal_Mode, Decimal_Mode, Hexidecimal_Mode };

    Num_Mode                    get_num_mode()              { return _num_mode; }
    void                        set_num_mode(Num_Mode mode) { _num_mode = mode; }
    void                        double_to_string(double num, String& str);
    uint8_t                     get_base();                   // Return the numeric base of the current num_mode
    Num_Mode                    _num_mode;                    // Decimal, binary, etc.
    uint8_t                     _precision;                   // The number of fractional decimal digits to include
    std::vector<double>         _memory = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };  // M0 - M9, + M10 for just plain M

================



////////////////////////////////////////////////////////////////////////////////
//
//  Utility routines
//
////////////////////////////////////////////////////////////////////////////////


// Return the numeric base of the current num_mode
//
uint8_t BaseCalculator::get_base() {
  switch(_num_mode) {
    case Binary_Mode:       return 2;
    case Octal_Mode:        return 8;
    case Decimal_Mode:      return 10;
    case Hexidecimal_Mode:  return 16;
  }
  return 0;   // Serious error
}


//  Convert a double into a string, with specific precision
//
void BaseCalculator::double_to_string(double num, String& str) {
  double  threshold   = 1.0 / pow(10.0, _precision);  // Precision is a private member variable
  int     m           = log10(num);
  char    buffer[80]  = {0};
  int     digit       = 0;
  char*   p           = buffer;

  while (num > 0 + threshold) {
    double weight = pow(10.0, m);
    digit = floor(num / weight);
    num  -= (digit * weight);
    *(p++)= '0' + digit;
    if(m == 0) *(p++) = '.';
    m--;
  }
  *(p) = '\0';
  str = buffer;
}
